import enum
from abc import ABC, abstractmethod
from typing import TYPE_CHECKING, Any, Optional

import torch

from vllm.logger import init_logger
from vllm.v1.core.sched.output import SchedulerOutput

from vllm.sequence import IntermediateTensors

if TYPE_CHECKING:
    from vllm.attention.backends.abstract import AttentionMetadata
    from vllm.config import VllmConfig
    from vllm.forward_context import ForwardContext
    from vllm.v1.core.kv_cache_manager import KVCacheBlocks
    from vllm.v1.request import Request

logger = init_logger(__name__)


class AFConnectorRole(enum.Enum):
    # Connector running in the scheduler process
    SCHEDULER = 0

    # Connector running in the worker process
    WORKER = 1


class AFConnectorMetadata:
    """
    Abstract Metadata used to communicate between the
    Scheduler AFConnector and Worker AFConnector.
    """

    pass


class AFConnectorBase(ABC):
    def __init__(self, vllm_config: "VllmConfig", role: AFConnectorRole):
        logger.warning(
            "Initializing AFConnectorBase. This API is experimental and "
            "subject to change in the future as we iterate the design."
        )
        self._connector_metadata = AFConnectorMetadata()
        self._vllm_config = vllm_config
        self._role = role

    # -------------------------------------------------------------------------
    #                                attn -> ffn
    # -------------------------------------------------------------------------
    @abstractmethod
    def a2f_attn(self, intermediate_tensors: IntermediateTensors):
        """
        This method will be called by the ATTN side.

        * To send the intermediate tensors generated by ATTN instances to FFN.
        """
        pass

    @abstractmethod
    def a2f_ffn(self) -> IntermediateTensors:
        """
        This method will be called by the FFN side.

        * To receive the intermediate tensors from ATTN.
        * And (Maybe) dispatch them from the receiver to other GPUs.
        """
        pass

    # -------------------------------------------------------------------------
    #                                attn <- ffn
    # -------------------------------------------------------------------------
    @abstractmethod
    def f2a_ffn(self, intermediate_tensors: IntermediateTensors):
        """
        This method will be called by the FFN side.

        * To send the intermediate tensors generated by FFN instances back to
            the sender (this should be the same GPU as it comes from)
        """
        pass

    @abstractmethod
    def f2a_attn(self, intermediate_tensors: IntermediateTensors):
        """
        This method will be called by the ATTN side.

        * To receive the MOE output intermediate tensors.
        * And (Maybe) dispatch them from the receiver to other GPUs.
            (this should be the same GPU as it comes from)
        """
        pass
